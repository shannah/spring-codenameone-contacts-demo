<?xml version="1.0" encoding="UTF-8"?>
    <!--build_version=3.0-->
    <!-- 
    This build script was generated by Codename One to build native mobile applications using Java.
    To learn more about Codename One go to https://www.codenameone.com/
    -->
    
    
<project name="shared" default="default" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">
    <description>Builds, tests, and runs the project ca-weblite-contacts-shared.</description>
    <path id="maven-ant-tasks.classpath" path="lib/maven-ant-tasks-2.1.3.jar" />
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
             uri="antlib:org.apache.maven.artifact.ant"
             classpathref="maven-ant-tasks.classpath" />
    <import file="nbproject/build-impl.xml"/>
    <property file="codenameone_settings.properties"/>

    <target depends="init,compile,jar" name="compile-test">
    </target>

    <target depends="compile-test" name="-do-test-run">        
    </target>
    
    <target depends="-do-test-run" description="Run unit tests." name="test">
        <echo>Currently testing a library project isn't supported</echo>
    </target>

    <target name="-pre-compile">
        <echo>Compile is forcing compliance to the supported API's/features for maximum device compatibility. This allows smaller
        code size and wider device support</echo>
        <mkdir dir="build/tmp"/>
        <javac destdir="build/tmp"
            source="1.8"
            target="1.8"
            bootclasspath="lib/CLDC11.jar"
            classpath="${javac.classpath}:${build.classes.dir}">
            <src path="${src.dir}"/>
        </javac>        
    </target>

      
    <target name="-pre-init">
        <property name="javac.source" value="1.8" />
        <property name="javac.target" value="1.8" />
    </target>

    <target name="run">
        <echo>You can't run a library project</echo>
    </target>

    <target name="debug">
        <echo>You can't run a library project</echo>
    </target>

    <target name="Stubs">
        <delete dir="build/stubs"/>
        <javadoc sourcepath="src"
            classpath="lib/CodenameOne.jar:lib/CLDC11.jar"
            docletpath="Stubber.jar"
            doclet="com.codename1.build.client.StubGenerator"> 
            <fileset dir="${src.dir}" excludes="*.java,${excludes}" includes="${includes}">
                <filename name="**/*.java"/>
            </fileset>
         </javadoc>
    </target>

    <target name="jar" depends="compile,Stubs">
        <mkdir dir="build/lib" />
        <mkdir dir="build/stubs"/>
        <zip basedir="${build.classes.dir}" compress="false" destfile="build/lib/main.zip" />
        <zip basedir="build/stubs" compress="false" destfile="build/lib/stubs.zip" />
        <copy file="manifest.properties" todir="build/lib" />
        <copy file="codenameone_library_appended.properties" todir="build/lib" />
        <copy file="codenameone_library_required.properties" todir="build/lib" />
        <antcall target="buildNativeIOS" />        
        <antcall target="buildNativeRIM" />        
        <antcall target="buildNativeAND" />        
        <antcall target="buildNativeSE" />        
        <antcall target="buildNativeWIN" />        
        <antcall target="buildNativeME" />       
        <antcall target="buildNativeJS" />       
        <mkdir dir="dist" />
        <zip basedir="build/lib" compress="true" destfile="dist/${application.title}.cn1lib" />
    </target>

    <target name="buildNativeRIM">
        <mkdir dir="native/rim"/>
        <path id="rimNativeDir">
            <fileset dir="native/rim"/>
        </path> 
        <property name="test.rimDir.property" refid="rimNativeDir"/> 
        <condition property="doesntHaveRimFiles">
            <equals arg1="" arg2="${test.rimDir.property}"/>
        </condition> 

        <antcall target="createRimZip" />        
    </target>
    
    <target name="createRimZip"
        unless="doesntHaveRimFiles">
        <echo>Zipping rim native code</echo>
        <zip basedir="native/rim" compress="false" destfile="build/lib/nativerim.zip" />
    </target>

    <target name="buildNativeAND">
        <mkdir dir="native/android"/>
        <path id="andNativeDir">
            <fileset dir="native/android"/>
        </path> 
        <property name="test.andDir.property" refid="andNativeDir"/> 
        <condition property="doesntHaveAndFiles">
            <equals arg1="" arg2="${test.andDir.property}"/>
        </condition> 

        <antcall target="createAndZip" />        
    </target>
    
    <target name="buildNativeSE">
        <mkdir dir="native/javase" />
        <path id="seNativeDir">
            <fileset dir="native/javase"/>
        </path> 
        <property name="test.seDir.property" refid="seNativeDir"/> 
        <condition property="doesntHaveSeFiles">
            <equals arg1="" arg2="${test.seDir.property}"/>
        </condition> 

        <antcall target="createSeZip" />        
    </target>

    <target name="createSeZip"
        unless="doesntHaveSeFiles">
        <echo>Zipping JavaSE native code</echo>
        <zip compress="false" destfile="build/lib/nativese.zip">
            <fileset dir="native/javase" excludes="*.jar" />
             <zipfileset  src="native/javase/*.jar"/>
        </zip>
    </target>

    <target name="createAndZip"
        unless="doesntHaveAndFiles">
        <echo>Zipping Android native code</echo>
        <zip basedir="native/android" compress="false" destfile="build/lib/nativeand.zip" />
    </target>

    <target name="buildNativeWIN">
        <mkdir dir="native/win"/>
        <path id="winNativeDir">
            <fileset dir="native/win"/>
        </path> 
        <property name="test.winDir.property" refid="winNativeDir"/> 
        <condition property="doesntHaveWinFiles">
            <equals arg1="" arg2="${test.winDir.property}"/>
        </condition> 

        <antcall target="createWinZip" />        
    </target>
    
    <target name="createWinZip"
        unless="doesntHaveWinFiles">
        <echo>Zipping win native code</echo>
        <zip basedir="native/win" compress="false" destfile="build/lib/nativewin.zip" />
    </target>

    <target name="buildNativeIOS">
        <mkdir dir="native/ios"/>
        <path id="iosNativeDir">
            <fileset dir="native/ios"/>
        </path> 
        <property name="test.iosDir.property" refid="iosNativeDir"/> 
        <condition property="doesntHaveIosFiles">
            <equals arg1="" arg2="${test.iosDir.property}"/>
        </condition> 

        <antcall target="createIosZip" />        
    </target>
    
    <target name="createIosZip"
        unless="doesntHaveIosFiles">
        <echo>Zipping ios native code</echo>
        <zip basedir="native/ios" compress="false" destfile="build/lib/nativeios.zip" />
    </target>

    <target name="buildNativeME">
        <mkdir dir="native/j2me"/>
        <path id="meNativeDir">
            <fileset dir="native/j2me"/>
        </path> 
        <property name="test.meDir.property" refid="meNativeDir"/> 
        <condition property="doesntHaveMeFiles">
            <equals arg1="" arg2="${test.meDir.property}"/>
        </condition> 

        <antcall target="createMeZip" />        
    </target>
    
    <target name="createMeZip"
        unless="doesntHaveMeFiles">
        <echo>Zipping me native code</echo>
        <zip basedir="native/j2me" compress="false" destfile="build/lib/nativeme.zip" />
    </target>

    
    <target name="buildNativeJS">
        <mkdir dir="native/javascript"/>
        <path id="jsNativeDir">
            <fileset dir="native/javascript"/>
        </path> 
        <property name="test.jsDir.property" refid="jsNativeDir"/> 
        <condition property="doesntHaveJsFiles">
            <equals arg1="" arg2="${test.jsDir.property}"/>
        </condition> 

        <antcall target="createJsZip" />        
    </target>
    
    <target name="createJsZip"
        unless="doesntHaveJsFiles">
        <echo>Zipping javascript native code</echo>
        <zip basedir="native/javascript" compress="false" destfile="build/lib/nativejavascript.zip" />
    </target>
            
            
    <target name="gen-mappers">
        <taskdef name="genmappers" 
                 classname="ca.weblite.dto.ant.GenerateMappers" 
                 classpath="lib/DataMapperANTTasks.jar">
        </taskdef>
        <delete dir="mappers/src"/>
        <mkdir dir="mappers/src"/>

        <genmappers file="mappers/src/ca/weblite/dto/Mappers.mirah"
            globalDataMapperContextName="dto-mappers"
            packageName="ca.weblite.contacts.dto"
            >
            <fileset dir="src" includes="**/*.java" excludes="**/enums/**"/>
        </genmappers>
        
         <ant inheritall="false" dir="mappers" target="cn1lib" />
    </target>
    
    <!-- Install Maven Dependencies:  CodenameOne.jar and CN1DataTools2.jar 
        required by install-maven -->
    <target name="install-maven-deps">
        
        <!-- Install Codename One in local maven repo -->
        <artifact:pom id="CodenameOnepom" file="CodenameOne-pom.xml"/>
        <artifact:install file="lib/CodenameOne.jar">
            <pom refid="CodenameOnepom"/>
        </artifact:install>
        
        <!-- Install DataMapper lib in local maven repo -->
        <delete dir="dist/CN1DataTools2-tmp"/>
        <unzip src="mappers/lib/CN1DataTools2.cn1lib" dest="dist/CN1DataTools2-tmp"/>
        <artifact:pom id="CN1DataTools2pom" file="CN1DataTools2-pom.xml"/>
        <artifact:install file="dist/CN1DataTools2-tmp/main.zip">
            <pom refid="CN1DataTools2pom"/>
        </artifact:install>
        
        <delete dir="dist/CN1DataTools2-tmp"/>
    </target>
    
    <!-- Takes existing DTO jar and DTOMappers jar, creates a combined jar and installs
         is as a Maven Artifact.  This task doesn't actually build - it should only be run
         after jar and gen-mappers is completed, So this generally shouldn't be run on its
         own but rather after an existing task -->
    <target name="install-maven" depends="jar,gen-mappers,install-maven-deps" description="Installs in local maven repo">
        <delete dir="dist/mappers-tmp"/>
        <delete dir="dist/dto-tmp"/>
        <unzip src="mappers/dist/mappers.cn1lib" dest="dist/mappers-tmp">
        </unzip>
        <unzip src="dist/ca-weblite-contacts-shared.cn1lib" dest="dist/dto-tmp">
        </unzip>
        <jar destfile="dist/ca-weblite-contacts-shared-combined.jar">
            <zipfileset src="dist/dto-tmp/main.zip"/>
            <zipfileset src="dist/mappers-tmp/main.zip"/>
        </jar>
        <delete dir="dist/mappers-tmp"/>
        <delete dir="dist/dto-tmp"/>
        <artifact:pom id="LibSharedpom" file="LibShared-pom.xml"/>
        <artifact:install file="dist/ca-weblite-contacts-shared-combined.jar">
            <pom refid="LibSharedpom"/>
        </artifact:install>
        
    </target>
    
    <!-- Installs the DTO and Mapper cn1libs in the mobile app project.  This assumes
    that the mobile app project resides in the client directory in the same
    parent directory as this project -->
    <target name="install-in-mobileapp" depends="jar,gen-mappers" description="Installs cn1libs in mobile app project">
        <copy file="dist/ca-weblite-contacts-shared.cn1lib" tofile="../client/lib/ca-weblite-contacts-shared.cn1lib" />
        <copy file="mappers/dist/mappers.cn1lib" tofile="../client/lib/mappers.cn1lib" />
        <copy file="mappers/lib/CN1DataTools2.cn1lib" tofile="../client/lib/CN1DataTools2.cn1lib"/>
        <ant inheritall="false" dir="../client" target="refresh-libs" />
    </target>
    
    <!-- Builds and installs the DTO project into the main mobile app project and in maven -->
    <target name="install" depends="install-in-mobileapp,install-maven" description="Builds this library and installs it in the app project">
        
    </target>
</project>